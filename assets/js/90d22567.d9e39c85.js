"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[696],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},f="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=p(a),u=r,d=f["".concat(l,".").concat(u)]||f[u]||m[u]||i;return a?n.createElement(d,o(o({ref:t},c),{},{components:a})):n.createElement(d,o({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[f]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7474:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:2},o="Jobs",s={unversionedId:"yaml-guide/jobs",id:"yaml-guide/jobs",title:"Jobs",description:"The YAML file has a top-level element called `jobs` that must contain a list of jobs.",source:"@site/docs/yaml-guide/jobs.md",sourceDirName:"yaml-guide",slug:"/yaml-guide/jobs",permalink:"/docs/yaml-guide/jobs",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Simplified YAML",permalink:"/docs/yaml-guide/yaml"},next:{title:"Steps",permalink:"/docs/yaml-guide/steps"}},l={},p=[{value:"Artifacts",id:"artifacts",level:2},{value:"Artifacts as a list of strings",id:"artifacts-as-a-list-of-strings",level:3},{value:"Artifacts as a list of objects",id:"artifacts-as-a-list-of-objects",level:3},{value:"Environment Variables",id:"environment-variables",level:2}],c={toc:p},f="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(f,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"jobs"},"Jobs"),(0,r.kt)("p",null,"The YAML file has a top-level element called ",(0,r.kt)("inlineCode",{parentName:"p"},"jobs")," that must contain a list of jobs."),(0,r.kt)("p",null,"By default, all jobs declared in YAML are part of the ",(0,r.kt)("em",{parentName:"p"},"default workflow"),", which is always run and has an empty\nstring as its workflow name."),(0,r.kt)("p",null,"The YAML Job syntax mirrors the definition of Jobs in the Dynamic SDK;\nsee the ",(0,r.kt)("a",{parentName:"p",href:"../guide-to-dynamic-builds/jobs#job-definitions"},"Job Definitions")," Guide for details.\nThe following elements can be specified:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"name"),": mandatory name for the job; referred to in dependencies."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"description"),": optional description for the job."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"steps"),": mandatory list of Steps to run for the Job - see ",(0,r.kt)("a",{parentName:"li",href:"steps"},"Steps")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"step_execution"),': optional value of "sequential" or "parallel".'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"type"),': optional value of "docker" or "exec", for Docker-based vs native jobs.'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"runs_on"),": optional list of labels constraining which types of runner the job can run on."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"depends"),": optional list of dependencies for the job, each one a string using ",(0,r.kt)("a",{parentName:"li",href:"job-dependency-syntax"},"Job Dependency Syntax")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"docker"),": specifies the Docker environment to use when running a Job - see ",(0,r.kt)("a",{parentName:"li",href:"docker-configuration"},"Docker Configuration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"environment"),": optional map of name-value pairs for environment variables - see ",(0,r.kt)("a",{parentName:"li",href:"#environment-variables"},"Environment Variables")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"fingerprint"),": optional list of command strings to produce the Job's fingerprint - see the ",(0,r.kt)("a",{parentName:"li",href:"../guide-to-dynamic-builds/fingerprints"},"Fingerprints")," Guide for details."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"artifacts"),": optional list of Artifacts defined by the Job - see ",(0,r.kt)("a",{parentName:"li",href:"#artifacts"},"Artifacts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"services"),": optional list of Services to run alongside the Job - see ",(0,r.kt)("a",{parentName:"li",href:"services"},"Services"))),(0,r.kt)("h2",{id:"artifacts"},"Artifacts"),(0,r.kt)("p",null,"An Artifact is a set of files produced by the Job that forms part of the output of the build. Each artifact\nhas name and a set of paths to the files making up the artifact.\nSee the ",(0,r.kt)("a",{parentName:"p",href:"../guide-to-dynamic-builds/jobs#artifacts"},"Artifacts")," Guide for more information about artifact names and paths."),(0,r.kt)("p",null,"Artifacts are specified via an 'artifacts' list. This can either be a list of strings or a list of objects."),(0,r.kt)("h3",{id:"artifacts-as-a-list-of-strings"},"Artifacts as a list of strings"),(0,r.kt)("p",null,"A list of strings will be interpreted interpreted as a list of paths that will be used to find files making up a single\nartifact with the name 'default'."),(0,r.kt)("p",null,"Here's an example of specifying a default artifact via a list of (one) string, in this case publishing every file\nin a bin directory as a single 'default' artifact:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"    artifacts:\n      - build/output/go/bin/*\n")),(0,r.kt)("h3",{id:"artifacts-as-a-list-of-objects"},"Artifacts as a list of objects"),(0,r.kt)("p",null,"A list of objects will be interpreted as a list of artifacts to publish, with the following elements specified\nfor each Artifact:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"name"),": mandatory name for the Artifact."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"paths"),": mandatory list of paths to find files making up the artifact")),(0,r.kt)("p",null,"Here's an example of specifying two artifacts via a list of objects. The first artifact, called 'wire', includes\nfiles from two paths:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"    artifacts:\n      - name: wire\n        paths: [ backend/*/app/wire_gen.go, backend/*/app/*/wire_gen.go ]\n      - name: grpc\n        paths: backend/api/grpc/*.pb.go\n")),(0,r.kt)("h2",{id:"environment-variables"},"Environment Variables"),(0,r.kt)("p",null,"Jobs and Services can be provided information via environment variables. Variables specified in the Job\napply to every Step within the Job."),(0,r.kt)("p",null,"Environment variables are specified using a map of variable names to values. Each value can either be a string\n(for a literal value) or an object containing a ",(0,r.kt)("strong",{parentName:"p"},"from_secret")," element with a secret name.\n",(0,r.kt)("a",{parentName:"p",href:"../guide-to-dynamic-builds/jobs#secrets"},"Secrets")," can be used to ensure that the provided information remains secure."),(0,r.kt)("p",null,"Here's an example of specifying two environment variables, one with a literal value and one using a secret:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"   environment:\n     DATABASE_DRIVER: postgres\n     DATABASE_PASSWORD:\n        from_secret: DB_PASSWORD \n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Variable names should normally be given in ALL_CAPS since they are mapped to environment variables to be passed\nto the Steps and Services at runtime."),(0,r.kt)("p",{parentName:"admonition"},"When running the ",(0,r.kt)("inlineCode",{parentName:"p"},"bb")," command-line tool the values for any required secrets must be provided in environment variables,\nso secret names should also normally be in ALL_CAPS.")))}m.isMDXComponent=!0}}]);