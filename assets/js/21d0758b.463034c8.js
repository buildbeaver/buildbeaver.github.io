"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[226],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,b=p["".concat(s,".").concat(d)]||p[d]||f[d]||i;return n?a.createElement(b,r(r({ref:t},c),{},{components:n})):a.createElement(b,r({ref:t},c))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,r[1]=l;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3125:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(7462),o=(n(7294),n(3905));const i={sidebar_position:6},r="Callbacks and Waiting",l={unversionedId:"guide-to-dynamic-builds/callbacks-and-waits",id:"guide-to-dynamic-builds/callbacks-and-waits",title:"Callbacks and Waiting",description:"To fully take advantage Dynamic Builds the Build Controller program will often need to run code after another",source:"@site/docs/guide-to-dynamic-builds/callbacks-and-waits.md",sourceDirName:"guide-to-dynamic-builds",slug:"/guide-to-dynamic-builds/callbacks-and-waits",permalink:"/docs/guide-to-dynamic-builds/callbacks-and-waits",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Docker Configuration",permalink:"/docs/guide-to-dynamic-builds/docker-configuration"},next:{title:"Build Status",permalink:"/docs/guide-to-dynamic-builds/build-status"}},s={},u=[{value:"Job Callbacks",id:"job-callbacks",level:2},{value:"Wait Functions",id:"wait-functions",level:2},{value:"Workflow Outputs",id:"workflow-outputs",level:2}],c={toc:u},p="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"callbacks-and-waiting"},"Callbacks and Waiting"),(0,o.kt)("p",null,"To fully take advantage Dynamic Builds the ",(0,o.kt)("em",{parentName:"p"},"Build Controller")," program will often need to run code after another\nJob or Workflow has finished. The results, artifacts or logs from completed Jobs can then be read\n(see ",(0,o.kt)("a",{parentName:"p",href:"build-status"},"Build Status"),") and used to decide which new Jobs to add."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#job-callbacks"},"Job Callbacks")," or ",(0,o.kt)("a",{parentName:"p",href:"#wait-functions"},"Wait Functions")," can be used to ensure this code is run at\nthe correct time."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"workflows#workflow-dependencies"},"Workflow Dependencies")," can be used as a simple method to ensure one workflow does\nnot start until another workflow is completely finished. However, it's often faster to run workflows\nin parallel and have code wait for individual Jobs or ",(0,o.kt)("a",{parentName:"p",href:"#workflow-outputs"},"Workflow Outputs")," as required.")),(0,o.kt)("h2",{id:"job-callbacks"},"Job Callbacks"),(0,o.kt)("p",null,"The simplest way to run code after a particular job completes is to add a ",(0,o.kt)("em",{parentName:"p"},"Job Callback")," function to the\n",(0,o.kt)("a",{parentName:"p",href:"jobs#job-definitions"},"Job Definition"),". The callback function takes a single ",(0,o.kt)("em",{parentName:"p"},"event")," parameter\nwhich will provide the Job's new status; other information (including artifacts and logs) can be discovered and\nread from within the callback using methods on the Workflow and Build objects\n(see ",(0,o.kt)("a",{parentName:"p",href:"build-status"},"Build Status")," for details)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type JobCallback func(event *JobStatusChangedEvent)\n")),(0,o.kt)("p",null,"As with workflow handler functions, any outstanding jobs will be submitted after the callback function returns.\nThe workflow object's Submit() or MustSubmit() functions can also be used in a callback to submit new jobs\nimmediately. Note that the workflow function will often have returned before the callback is called, having finished\nsubmitting the initial set of Jobs to run."),(0,o.kt)("p",null,"The following Job methods are available to define callbacks. Each specifies a function to be called:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"OnCompletion")," (optional): call when the Job is completed (succeeded, failed or cancelled).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"OnSuccess")," (optional): call when the Job succeeds. Not called on error.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"OnFailure")," (optional): call when the Job fails.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"OnStatusChanged")," (optional): call each time the status of the Job changes."))),(0,o.kt)("p",null,"Here's an example of the use of callbacks in Go:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'    w.Job(bb.NewJob().\n        Name("test-callbacks-job").\n        Step(bb.NewStep().\n            Name("step-1").\n            Commands("echo \'Test job is running\'").\n        OnSuccess(func(event *bb.JobStatusChangedEvent) {\n            bb.Log(bb.LogLevelInfo, "Job is finished; new jobs could be created here")\n        }).\n        OnFailure(func(event *bb.JobStatusChangedEvent) {\n            bb.Log(bb.LogLevelInfo, "Job failed")\n        }))\n')),(0,o.kt)("h2",{id:"wait-functions"},"Wait Functions"),(0,o.kt)("p",null,"For more complex situations, ",(0,o.kt)("em",{parentName:"p"},"Wait")," functions can be used to wait for events before continuing. Wait functions\nwill block the current thread. Since each Workflow has its own thread (or Goroutine in Golang), by default\ncalling a Wait function will block the current workflow from submitting any further jobs until the Wait returns."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The BuildBeaver Go SDK is thread-safe, so a workflow function can start a new Goroutine that can call a Wait function\nand then run some code (e.g. to submit new Jobs). In this case the caller is responsible for thread\nsynchronization, and for ensuring that a workflow function does not exit until all the Goroutines it spawned\nhave done their work.")),(0,o.kt)("p",null,"Every workflow handler function is passed in a Workflow object as a parameter\n(see ",(0,o.kt)("a",{parentName:"p",href:"workflows#workflow-definitions"},"Workflow Definitions"),") and so\na workflow object is always available. The following Wait methods are available:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"WaitForJob(jobs...)"),": Waits for any one of the specified Jobs to finish. Returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"JobStatusChangedEvent"),"\nobject specifying the Job ID, name, and final status of the first of the specified jobs to complete."),(0,o.kt)("p",{parentName:"li"},"Jobs are specified as fully-qualified job names, i.e. ",(0,o.kt)("em",{parentName:"p"},"workflow.jobname"),' (e.g. "tests.unit-tests-job"),\nand each job being waited on can be part of any workflow.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"WaitForWorkflow(workflowName)"),": Waits for the specified workflow to be fully finished. Similar to\nto using a ",(0,o.kt)("a",{parentName:"p",href:"workflows#workflow-dependencies"},"Workflow Dependency")," except that ",(0,o.kt)("em",{parentName:"p"},"WaitForWorkflow")," can\nbe called anywhere in your workflow function, whereas workflow dependencies will wait before the\nworkflow function starts.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"WaitForOutput(workflowName, outputName)"),": Waits for the specified output to be made available by the specified\nworkflow. See ",(0,o.kt)("a",{parentName:"p",href:"#workflow-outputs"},"Workflow Outputs")," for details.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("admonition",{parentName:"li",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you find yourself calling WaitForJob() to wait for a Job from a different workflow, consider using either\n",(0,o.kt)("a",{parentName:"p",href:"workflows#workflow-dependencies"},"Workflow Dependencies")," to wait for the entire workflow, or\n",(0,o.kt)("a",{parentName:"p",href:"#workflow-outputs"},"Workflow Outputs")," to wait for specific information to become available. This avoids\nbuilding knowledge into your workflow of the names of specific jobs within another workflow, improving\n",(0,o.kt)("em",{parentName:"p"},"workflow encapsulation"),".")))),(0,o.kt)("h2",{id:"workflow-outputs"},"Workflow Outputs"),(0,o.kt)("p",null,"Information can easily and conveniently be sent from one workflow function to another within the Job Controller\nby using ",(0,o.kt)("em",{parentName:"p"},"Workflow Outputs"),". These outputs are maintained in-memory within the Job Controller process and\nare not sent to the server (or bb command) so no bandwidth is required."),(0,o.kt)("p",null,"Each workflow maintains a set of Outputs as name-value pairs, where the values can be of any in-memory data type.\nA workflow function can set an output by calling the following method on their Workflow object:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"SetOutput(outputName, value)"),": Sets the output with the specified name to the specified value, which can be\nof any data type. This would typically be done in a ",(0,o.kt)("a",{parentName:"li",href:"#job-callbacks"},"Job Callback")," function after a Job has completed.")),(0,o.kt)("p",null,"Another workflow function can wait until an output is available, and obtain the value, using one of the following\nmethods on ",(0,o.kt)("em",{parentName:"p"},"their")," Workflow object:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"WaitForOutput(workflowName, outputName)"),": Waits for the specified workflow to provide an output with the\nspecified name, then returns the output. Returns an error if the specified workflow finishes without providing\nthe value.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"MustWaitForOutput(workflowName, outputName)"),": Same as WaitForOutput() but will terminate the program (and so\nfail the build) if the specified workflow finishes without providing the value."))))}f.isMDXComponent=!0}}]);