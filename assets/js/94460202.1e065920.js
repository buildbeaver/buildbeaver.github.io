"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[523],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var b=r.createContext({}),c=function(e){var n=r.useContext(b),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(b.Provider,{value:n},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,b=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=c(t),u=o,m=l["".concat(b,".").concat(u)]||l[u]||p[u]||a;return t?r.createElement(m,i(i({ref:n},d),{},{components:t})):r.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var b in n)hasOwnProperty.call(n,b)&&(s[b]=n[b]);s.originalType=e,s[l]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3652:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>b,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:20},i="Real-World Example",s={unversionedId:"guide-to-dynamic-builds/example",id:"guide-to-dynamic-builds/example",title:"Real-World Example",description:"The following Go code is a real-world Build Controller, and demonstrates many of the dynamic features of the",source:"@site/docs/guide-to-dynamic-builds/example.md",sourceDirName:"guide-to-dynamic-builds",slug:"/guide-to-dynamic-builds/example",permalink:"/docs/guide-to-dynamic-builds/example",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Services",permalink:"/docs/guide-to-dynamic-builds/services"},next:{title:"YAML Guide",permalink:"/docs/category/yaml-guide"}},b={},c=[],d={toc:c},l="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(l,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"real-world-example"},"Real-World Example"),(0,o.kt)("p",null,"The following Go code is a real-world Build Controller, and demonstrates many of the dynamic features of the\nBuildBeaver Go SDK."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n\n    "github.com/buildbeaver/go-sdk/bb"\n)\n\nvar useNodeJSDockerImage = bb.NewDocker().\n    Image("node:16.16.0-buster").\n    Pull(bb.DockerPullIfNotExists).\n    Shell("/bin/bash")\n\nvar goJobFingerprint = []string{\n    `find build/scripts -type f | sort | xargs sha1sum`,\n    `find backend/ -name \'*.go\' -not -path "*/vendor/*" -type f | sort | xargs sha1sum`,\n    `sha1sum backend/go.mod`,\n    `sha1sum backend/go.sum`,\n}\n\nvar frontendJobFingerprint = []string{\n    `find build/scripts -type f | sort | xargs sha1sum`,\n    `find frontend/ -not -path "*/node_modules/*" -not -path "frontend/public/*" -type f | sort | xargs sha1sum`,\n}\n\nfunc main() {\n    bb.Workflows(\n        bb.NewWorkflow().Name("base").Handler(submitBaseJobs),\n        bb.NewWorkflow().Name("generate").Handler(submitGenerateJobs),\n        bb.NewWorkflow().Name("unit-test").Handler(submitUnitTestJobs),\n        bb.NewWorkflow().Name("integration-test").Handler(submitIntegrationTestJobs),\n        bb.NewWorkflow().Name("build").Handler(submitBuildJobs),\n        bb.NewWorkflow().Name("frontend").Handler(submitFrontEndJobs),\n        bb.NewWorkflow().Name("openapi").Handler(submitOpenAPIJobs),\n    )\n}\n\nfunc submitBaseJobs(w *bb.Workflow) error {\n    w.Job(bb.NewJob().\n        Name("base-images").\n        Desc("Builds the base image needed for the build pipeline").\n        Docker(bb.NewDocker().\n            Image("docker:20.10").\n            Pull("if-not-exists")).\n        Fingerprint("sha1sum build/docker/go-builder/Dockerfile").\n        Env(bb.NewEnv().\n            Name("AWS_ACCESS_KEY_ID").\n            ValueFromSecret("AWS_ACCESS_KEY_ID")).\n        Env(bb.NewEnv().\n            Name("AWS_SECRET_ACCESS_KEY").\n            ValueFromSecret("AWS_SECRET_ACCESS_KEY")).\n        Step(bb.NewStep().\n            Name("go-builder").\n            Commands(\n                "apk add bash git aws-cli",\n                "git config --global --add safe.directory $(pwd)",\n                "./build/scripts/build-docker.sh -t $BB_JOB_FINGERPRINT -p go-builder")).\n        OnSuccess(func(event *bb.JobStatusChangedEvent) {\n            // Calculate the docker image name from this job\'s fingerprint\n            jGraph := w.GetBuild().MustGetJobGraph(event.JobID)\n            goDockerConfig := bb.NewDocker().\n                Image(fmt.Sprintf("us-west-2.amazonaws.com/go-builder:%s", *jGraph.Job.Fingerprint)).\n                Pull(bb.DockerPullIfNotExists).\n                Shell("/bin/bash").\n                AWSAuth(bb.NewAWSAuth().\n                    Region("us-west-2").\n                    AccessKeyIDFromSecret("AWS_ACCESS_KEY_ID").\n                    SecretAccessKeyFromSecret("AWS_SECRET_ACCESS_KEY"))\n            w.SetOutput("go-docker-config", goDockerConfig)\n        }))\n    w.MustSubmit()\n\n    goDockerConfig := w.MustWaitForOutput("base", "go-docker-config").(*bb.DockerConfig)\n\n    w.Job(bb.NewJob().\n        Name("backend-preflight").\n        Desc("Performs preflight checks on all backend code").\n        Depends("base.base-images").\n        Docker(goDockerConfig).\n        Fingerprint(goJobFingerprint...).\n        Step(bb.NewStep().\n            Name("lint").\n            Commands("./build/scripts/ci/backend-preflight-lint.sh")))\n\n    return nil\n}\n\nfunc submitGenerateJobs(w *bb.Workflow) error {\n    goDockerConfig := w.MustWaitForOutput("base", "go-docker-config").(*bb.DockerConfig)\n\n    w.Job(bb.NewJob().\n        Name("backend-generate").\n        Desc("Generates all backend code (wire files, protobufs etc.)").\n        Depends("base.backend-preflight").\n        Docker(goDockerConfig).\n        Fingerprint(goJobFingerprint...).\n        Step(bb.NewStep().\n            Name("wire").\n            Commands("./build/scripts/ci/backend-generate-wire.sh")).\n        Artifact(bb.NewArtifact().\n            Name("wire").\n            Paths("backend/*/app/wire_gen.go", "backend/*/app/*/wire_gen.go")).\n        Artifact(bb.NewArtifact().\n            Name("grpc").\n            Paths("backend/api/grpc/*.pb.go")))\n\n    return nil\n}\n\nfunc submitUnitTestJobs(w *bb.Workflow) error {\n    goDockerConfig := w.MustWaitForOutput("base", "go-docker-config").(*bb.DockerConfig)\n\n    w.Job(bb.NewJob().\n        Name("backend-sqlite").\n        Desc("Runs all backend unit tests on top of SQLite").\n        Depends("generate.backend-generate.artifacts").\n        Docker(goDockerConfig).\n        Fingerprint(goJobFingerprint...).\n        Env(bb.NewEnv().\n            Name("TEST_DB_DRIVER").\n            Value("sqlite3")).\n        Step(bb.NewStep().\n            Name("test").\n            Commands(\n                ". build/scripts/lib/go-env.sh",\n                "cd backend && go test -v -count=1 -mod=vendor -short ./...")))\n\n    w.Job(bb.NewJob().\n        Name("backend-postgres").\n        Desc("Runs all backend unit tests on top of Postgres").\n        Depends("generate.backend-generate.artifacts").\n        Docker(goDockerConfig).\n        Fingerprint(goJobFingerprint...).\n        Env(bb.NewEnv().\n            Name("TEST_DB_DRIVER").\n            Value("postgres")).\n        Env(bb.NewEnv().\n            Name("TEST_CONNECTION_STRING").\n            Value("postgres://username:use-secrets-dont-put-password-here@postgres:5432/?sslmode=disable")).\n        Step(bb.NewStep().\n            Name("wait-for-postgres").\n            Commands(\n                `for i in {1..15}; do pg_isready -d "${TEST_CONNECTION_STRING}" && break || sleep 1; done`)).\n        Step(bb.NewStep().\n            Name("test").\n            Commands(\n                ". build/scripts/lib/go-env.sh",\n                "cd backend && go test -v -count=1 -mod=vendor -short ./...")).\n        Service(bb.NewService().\n            Name("postgres").\n            Image("postgres:14").\n            Env(bb.NewEnv().\n                Name("POSTGRES_USER").\n                Value("user-name")).\n            Env(bb.NewEnv().\n                Name("POSTGRES_PASSWORD").\n                Value("use-secrets-dont-put-password-here"))))\n    return nil\n}\n\nfunc submitIntegrationTestJobs(w *bb.Workflow) error {\n    goDockerConfig := w.MustWaitForOutput("base", "go-docker-config").(*bb.DockerConfig)\n\n    w.Job(bb.NewJob().\n        Name("backend-sqlite").\n        Desc("Runs all backend integration tests on top of SQLite").\n        Depends("generate.backend-generate.artifacts").\n        Docker(goDockerConfig).\n        Fingerprint(goJobFingerprint...).\n        Env(bb.NewEnv().\n            Name("TEST_DB_DRIVER").\n            Value("sqlite3")).\n        Step(bb.NewStep().\n            Name("test").\n            Commands(\n                ". build/scripts/lib/go-env.sh",\n                "cd backend && go test -v -count=1 -mod=vendor -run Integration ./...")))\n\n    w.Job(bb.NewJob().\n        Name("backend-postgres").\n        Desc("Runs all backend integration tests on top of Postgres").\n        Depends("generate.backend-generate.artifacts").\n        Docker(goDockerConfig).\n        Fingerprint(goJobFingerprint...).\n        Env(bb.NewEnv().\n            Name("TEST_DB_DRIVER").\n            Value("postgres")).\n        Env(bb.NewEnv().\n            Name("TEST_CONNECTION_STRING").\n            Value("postgres://username:use-secrets-dont-put-password-here@postgres:5432/?sslmode=disable")).\n        Step(bb.NewStep().\n            Name("wait-for-postgres").\n            Commands(\n                `for i in {1..15}; do pg_isready -d "${TEST_CONNECTION_STRING}" && break || sleep 1; done`)).\n        Step(bb.NewStep().\n            Name("test").\n            Commands(\n                ". build/scripts/lib/go-env.sh",\n                "cd backend && go test -v -count=1 -mod=vendor -run Integration ./...")).\n        Service(bb.NewService().\n            Name("postgres").\n            Image("postgres:14").\n            Env(bb.NewEnv().\n                Name("POSTGRES_USER").\n                Value("user-name")).\n            Env(bb.NewEnv().\n                Name("POSTGRES_PASSWORD").\n                Value("use-secrets-dont-put-password-here"))))\n    return nil\n}\n\nfunc submitBuildJobs(w *bb.Workflow) error {\n    goDockerConfig := w.MustWaitForOutput("base", "go-docker-config").(*bb.DockerConfig)\n\n    w.Job(bb.NewJob().\n        Name("backend-build").\n        Desc("Builds all backend binaries").\n        Depends(\n            "generate.backend-generate.artifacts",\n            "unit-test.backend-sqlite",\n            "unit-test.backend-postgres",\n            "integration-test.backend-sqlite",\n            "integration-test.backend-postgres").\n        Docker(goDockerConfig).\n        Fingerprint(goJobFingerprint...).\n        Step(bb.NewStep().\n            Name("go").\n            Commands("./build/scripts/ci/backend-build.sh")).\n        Artifact(bb.NewArtifact().\n            Name("go-binaries").\n            Paths("build/output/go/bin/*")))\n    return nil\n}\n\nfunc submitFrontEndJobs(w *bb.Workflow) error {\n    w.Job(bb.NewJob().\n        Name("preflight").\n        Desc("Performs preflight checks on all frontend code").\n        Docker(useNodeJSDockerImage).\n        Fingerprint(frontendJobFingerprint...).\n        Step(bb.NewStep().\n            Name("lint").\n            Commands(\n                "npm install --location=global \\"prettier@2.8.4\\"",\n                "./build/scripts/ci/frontend-preflight-lint.sh")))\n\n    w.Job(bb.NewJob().\n        Name("unit-test").\n        Desc("Runs all frontend unit tests").\n        Depends("frontend.preflight").\n        Docker(useNodeJSDockerImage).\n        Fingerprint(frontendJobFingerprint...).\n        Step(bb.NewStep().\n            Name("install").\n            Commands(\n                ". build/scripts/lib/node-env.sh",\n                "cd frontend && yarn install")).\n        Step(bb.NewStep().\n            Name("test").\n            Commands(\n                ". build/scripts/lib/node-env.sh",\n                "cd frontend && yarn test")))\n\n    w.Job(bb.NewJob().\n        Name("build").\n        Desc("Builds all frontend code").\n        Depends("frontend.unit-test").\n        Docker(useNodeJSDockerImage).\n        Fingerprint(frontendJobFingerprint...).\n        Step(bb.NewStep().\n            Name("install").\n            Commands(\n                ". build/scripts/lib/node-env.sh",\n                "cd frontend && yarn install")).\n        Step(bb.NewStep().\n            Name("build").\n            Commands(\n                ". build/scripts/lib/node-env.sh",\n                "cd frontend && yarn build")))\n    return nil\n}\n\nfunc submitOpenAPIJobs(w *bb.Workflow) error {\n    w.Job(bb.NewJob().\n        Name("generate-code").\n        Desc("Generates API Clients from our OpenAPI specs").\n        Depends("base.backend-preflight").\n        Docker(bb.NewDocker().\n            Image("openapitools/openapi-generator-cli:v6.5.0").\n            Pull(bb.DockerPullIfNotExists).\n            Shell("/bin/bash")).\n        Fingerprint(\n            "sha1sum backend/server/api/rest/openapi/dynamic-openapi.yaml",\n            "sha1sum backend/server/api/rest/openapi/core-openapi.yaml").\n        Step(bb.NewStep().\n            Name("core-go").\n            Commands("./build/scripts/ci/backend-openapi.sh core-openapi.yaml go sdk/core/go/client")).\n        Step(bb.NewStep().\n            Name("core-python").\n            Commands("./build/scripts/ci/backend-openapi.sh core-openapi.yaml python sdk/core/python/client")).\n        Step(bb.NewStep().\n            Name("dynamic-go").\n            Commands("bb_DEBUG=1 ./build/scripts/ci/backend-openapi.sh dynamic-openapi.yaml go sdk/dynamic/go/client")))\n    return nil\n}\n\n')))}p.isMDXComponent=!0}}]);