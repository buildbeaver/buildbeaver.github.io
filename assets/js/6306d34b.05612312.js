"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[280],{3905:(e,o,t)=>{t.d(o,{Zo:()=>p,kt:()=>c});var n=t(7294);function r(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function l(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);o&&(n=n.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?l(Object(t),!0).forEach((function(o){r(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function i(e,o){if(null==e)return{};var t,n,r=function(e,o){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],o.indexOf(t)>=0||(r[t]=e[t]);return r}(e,o);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),f=function(e){var o=n.useContext(s),t=o;return e&&(t="function"==typeof e?e(o):a(a({},o),e)),t},p=function(e){var o=f(e.components);return n.createElement(s.Provider,{value:o},e.children)},w="mdxType",u={inlineCode:"code",wrapper:function(e){var o=e.children;return n.createElement(n.Fragment,{},o)}},d=n.forwardRef((function(e,o){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),w=f(t),d=r,c=w["".concat(s,".").concat(d)]||w[d]||u[d]||l;return t?n.createElement(c,a(a({ref:o},p),{},{components:t})):n.createElement(c,a({ref:o},p))}));function c(e,o){var t=arguments,r=o&&o.mdxType;if("string"==typeof e||r){var l=t.length,a=new Array(l);a[0]=d;var i={};for(var s in o)hasOwnProperty.call(o,s)&&(i[s]=o[s]);i.originalType=e,i[w]="string"==typeof e?e:r,a[1]=i;for(var f=2;f<l;f++)a[f]=t[f];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7649:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>f});var n=t(7462),r=(t(7294),t(3905));const l={sidebar_position:2},a="Workflows",i={unversionedId:"guide-to-dynamic-builds/workflows",id:"guide-to-dynamic-builds/workflows",title:"Workflows",description:"Workflows are groups of jobs. Each workflow can be run separately but can have dependencies on other workflows.",source:"@site/docs/guide-to-dynamic-builds/workflows.md",sourceDirName:"guide-to-dynamic-builds",slug:"/guide-to-dynamic-builds/workflows",permalink:"/docs/guide-to-dynamic-builds/workflows",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Key Concepts",permalink:"/docs/guide-to-dynamic-builds/key-concepts"},next:{title:"Jobs",permalink:"/docs/guide-to-dynamic-builds/jobs"}},s={},f=[{value:"Registering Workflows",id:"registering-workflows",level:2},{value:"Workflow Definitions",id:"workflow-definitions",level:2},{value:"Workflow Dependencies",id:"workflow-dependencies",level:2}],p={toc:f},w="wrapper";function u(e){let{components:o,...t}=e;return(0,r.kt)(w,(0,n.Z)({},p,t,{components:o,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"workflows"},"Workflows"),(0,r.kt)("p",null,"Workflows are groups of jobs. Each workflow can be run separately but can have dependencies on other workflows.\nFor example, to run only the 'generate-code' workflow locally (along with any other workflows\nit depends on):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"bb run generate-code\n")),(0,r.kt)("p",null,"When using the Dynamic SDK each workflow is defined by a ",(0,r.kt)("em",{parentName:"p"},"workflow function"),", responsible for submitting jobs and\nincluding any required business logic.  A workflow function is free to use whatever language features,\nlibraries and APIs are useful, and uses the BuildBeaver SDK to submit jobs to the build, and to wait for other jobs,\nworkflows or artifacts."),(0,r.kt)("p",null,"Each workflow function is run independently on its own thread. The SDK provides mechanisms for synchronization\nbetween workflows, e.g. waiting for artifacts or jobs from another workflow."),(0,r.kt)("h2",{id:"registering-workflows"},"Registering Workflows"),(0,r.kt)("p",null,"Workflows are created and run by calling the Workflows() function, which takes a list of workflows as parameters.\nThe Go syntax is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func Workflows(workflows ...*WorkflowDefinition)\n")),(0,r.kt)("p",null,"Workflows() is the 'entry point' function for a Build Coordinator program to define the set of workflows available\nto the build. Each workflow is registered and then all required workflows are run (in parallel by default)\nto submit jobs to the build. Returns when the workflow handlers for all required workflows have completed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func AddWorkflows(workflows ...*WorkflowDefinition)\n")),(0,r.kt)("p",null,"AddWorkflows() can be used to register extra workflows for the current build, and should be called before Workflows().\nIn Golang AddWorkflows() can be called from an init function prior to calling Workflows() from the main function,\nand can be used to 'drop in' source files with extra workflows without modifying the main program."),(0,r.kt)("h2",{id:"workflow-definitions"},"Workflow Definitions"),(0,r.kt)("p",null,"A workflow definition is created by calling NewWorkflow() and then properties are set by calling methods on the\nobject. Here's an example in Go:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'bb.Workflows(\n    bb.NewWorkflow().\n        Name("tests").\n        Handler(submitTestJobs), \n    bb.NewWorkflow().\n        Name("deploy").\n        Handler(submitDeployJobs).\n        Depends("tests", bb.WorkflowConcurrent),\n)\n')),(0,r.kt)("p",null,"The following methods are available to set properties on a Workflow Definition object:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Name")," (mandatory): a name to use when referencing the workflow from other workflows.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Handler")," (mandatory): the workflow handler function to call to run the workflow and submit jobs.\nThe function must take a Workflow object which can be used to perform actions, and return an error on failure;\nthis will cause the build to fail. Here's an example in Go (body omitted):"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func submitTestJobs(w *bb.Workflow) error { ... }\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Depends")," (optional): indicates that the specified workflow depends on another workflow; see\n",(0,r.kt)("a",{parentName:"p",href:"#workflow-dependencies"},"Workflow Dependencies"),"."))),(0,r.kt)("h2",{id:"workflow-dependencies"},"Workflow Dependencies"),(0,r.kt)("p",null,"A ",(0,r.kt)("em",{parentName:"p"},"Workflow Dependency")," indicates that the dependent workflow can only be run if another workflow is also\nrun. The dependent workflow can either be started after the other workflow (default) or run\nin parallel. If the bb command line is used to request that only a specific workflow is run then the dependency\nensures the other workflow will also run."),(0,r.kt)("p",null,"Multiple dependencies can be specified by calling Depends() multiple times for the same workflow definition.\nThe Go syntax is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func (*WorkflowDefinition) Depends(workflowName ResourceName, options ...WorkflowDependsOption) *WorkflowDefinition\n")),(0,r.kt)("p",null,"Each call to Depends() can specify zero or more options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"WorkflowWait")," (default): specifies not to start the dependent workflow until the other workflow has\ncompletely finished, including all jobs.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"WorkflowConcurrent"),": allows the dependent workflow to run concurrently with the other workflow.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"WorkflowTerminateOnFailure")," (default): terminates the current process if the other workflow fails, instead\nof starting the dependent workflow.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"WorkflowStartOnFailure")," starts the dependent workflow even if the other workflow fails. The workflow handler\nfor the dependent workflow is responsible for checking the status of any jobs it needed to complete successfully."))))}u.isMDXComponent=!0}}]);