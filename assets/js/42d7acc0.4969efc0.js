"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[799],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var d=r.createContext({}),c=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(d.Provider,{value:n},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,d=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),l=c(t),g=s,u=l["".concat(d,".").concat(g)]||l[g]||m[g]||i;return t?r.createElement(u,o(o({ref:n},p),{},{components:t})):r.createElement(u,o({ref:n},p))}));function u(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,o=new Array(i);o[0]=g;var a={};for(var d in n)hasOwnProperty.call(n,d)&&(a[d]=n[d]);a.originalType=e,a[l]="string"==typeof e?e:s,o[1]=a;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},6923:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=t(7462),s=(t(7294),t(3905));const i={sidebar_position:20},o="Real-World Example",a={unversionedId:"yaml-guide/example",id:"yaml-guide/example",title:"Real-World Example",description:"The following YAML is a real-world build, and demonstrates most of the features of the BuildBeaver YAML",source:"@site/docs/yaml-guide/example.md",sourceDirName:"yaml-guide",slug:"/yaml-guide/example",permalink:"/docs/yaml-guide/example",draft:!1,tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Services",permalink:"/docs/yaml-guide/services"},next:{title:"GitHub Actions",permalink:"/docs/category/github-actions"}},d={},c=[],p={toc:c},l="wrapper";function m(e){let{components:n,...t}=e;return(0,s.kt)(l,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"real-world-example"},"Real-World Example"),(0,s.kt)("p",null,"The following YAML is a real-world build, and demonstrates most of the features of the BuildBeaver YAML\nsyntax."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "0.3"\n\ntemplates:\n  use_go_builder_docker_image: &use_go_builder_docker_image\n    image: 123400005678.dkr.ecr.us-west-2.amazonaws.com/go-builder:${{ jobs.backend-base-images.fingerprint }}\n    pull: if-not-exists\n    aws_auth:\n      aws_region: us-west-2\n      aws_access_key_id:\n        from_secret: AWS_ACCESS_KEY_ID\n      aws_secret_access_key:\n        from_secret: AWS_SECRET_ACCESS_KEY\n\n  use_nodejs_docker_image: &use_nodejs_docker_image\n    image: node:16.16.0-buster\n    pull: if-not-exists\n    shell: /bin/bash\n\n  go_job_fingerprint: &go_job_fingerprint\n    - find build/scripts -type f | sort | xargs sha1sum\n    - find backend/ -name \'*.go\' -not -path "*/vendor/*" -type f | sort | xargs sha1sum\n    - sha1sum backend/go.mod\n    - sha1sum backend/go.sum\n\n  frontend_job_fingerprint: &frontend_job_fingerprint\n    - find build/scripts -type f | sort | xargs sha1sum\n    - find frontend/ -not -path "*/node_modules/*" -not -path "frontend/public/*" -type f | sort | xargs sha1sum\n\njobs:\n  - name: backend-base-images\n    description: Builds the base image needed for the build pipeline\n    docker:\n      image: docker:20.10\n      pull: if-not-exists\n    fingerprint:\n      - sha1sum build/docker/go-builder/Dockerfile\n    environment:\n      AWS_ACCESS_KEY_ID:\n        from_secret: AWS_ACCESS_KEY_ID\n      AWS_SECRET_ACCESS_KEY:\n        from_secret: AWS_SECRET_ACCESS_KEY\n    steps:\n      - name: go-builder\n        commands: |\n          apk add bash git aws-cli\n          git config --global --add safe.directory $(pwd)\n          ./build/scripts/build-docker.sh -t $BB_JOB_FINGERPRINT -p go-builder\n\n  - name: backend-preflight\n    description: Performs preflight checks on all backend code\n    depends: backend-base-images\n    docker: *use_go_builder_docker_image\n    fingerprint: *go_job_fingerprint\n    steps:\n      - name: lint\n        commands: |\n          ./build/scripts/ci/backend-preflight-lint.sh\n\n  - name: backend-generate\n    description: Generates all backend code (wire files, protobufs etc.)\n    depends: [backend-base-images, backend-preflight]\n    docker: *use_go_builder_docker_image\n    fingerprint: *go_job_fingerprint\n    steps:\n      - name: wire\n        commands: |\n          ./build/scripts/ci/backend-generate-wire.sh\n    artifacts:\n      - name: wire\n        paths: [ backend/*/app/wire_gen.go, backend/*/app/*/wire_gen.go ]\n      - name: grpc\n        paths: backend/api/grpc/*.pb.go\n\n  - name: backend-openapi\n    description: Generates API Clients from our OpenAPI specs\n    docker:\n      image: openapitools/openapi-generator-cli:v6.5.0\n      pull: if-not-exists\n      shell: /bin/bash\n    fingerprint: sha1sum backend/server/api/rest/openapi/dynamic-openapi.yaml\n    steps:\n      - name: core-go\n        commands: |\n          ./build/scripts/ci/backend-openapi.sh core-openapi.yaml go sdk/core/go/generated/openapi\n      - name: core-python\n        commands: |\n          ./build/scripts/ci/backend-openapi.sh core-openapi.yaml python sdk/core/python/generated/openapi\n      - name: dynamic-go\n        commands: |\n          ./build/scripts/ci/backend-openapi.sh dynamic-openapi.yaml go sdk/dynamic/go/generated/openapi\n    artifacts:\n      - name: core-sdk-go\n        paths: sdk/core/go/generated/**/*\n      - name: core-sdk-python\n        paths: sdk/core/python/generated/**/*\n      - name: dynamic-sdk-go\n        paths: sdk/dynamic/go/generated/**/*\n\n  - name: backend-unit-test-sqlite\n    description: Runs all backend unit tests on top of SQLite\n    depends: [ backend-base-images, backend-generate.artifacts ]\n    docker: *use_go_builder_docker_image\n    fingerprint: *go_job_fingerprint\n    environment:\n      TEST_DB_DRIVER: sqlite3\n    steps:\n      - name: test\n        commands: |\n          . build/scripts/lib/go-env.sh\n          cd backend && go test -v -count=1 -mod=vendor -short ./...\n\n  - name: backend-unit-test-postgres\n    description: Runs all backend unit tests on top of Postgres\n    depends: [ backend-base-images, backend-generate.artifacts ]\n    docker: *use_go_builder_docker_image\n    fingerprint: *go_job_fingerprint\n    environment:\n      TEST_DB_DRIVER: postgres\n      TEST_CONNECTION_STRING: postgres://username:put-password-here@postgres:5432/?sslmode=disable\n    steps:\n      - name: test\n        commands: |\n          . build/scripts/lib/go-env.sh\n          cd backend && go test -v -count=1 -mod=vendor -short ./...\n    services:\n      - name: postgres\n        image: postgres:14\n        environment:\n          POSTGRES_USER: user-name\n          POSTGRES_PASSWORD: use-secrets-dont-put-password-here\n\n  - name: backend-integration-test-sqlite\n    description: Runs all backend integration tests on top of SQLite\n    depends: [ backend-base-images, backend-generate.artifacts ]\n    docker: *use_go_builder_docker_image\n    fingerprint: *go_job_fingerprint\n    environment:\n      TEST_DB_DRIVER: sqlite3\n    steps:\n      - name: test\n        commands: |\n          . build/scripts/lib/go-env.sh\n          cd backend && go test -v -count=1 -mod=vendor -run Integration ./...\n\n  - name: backend-integration-test-postgres\n    description: Runs all backend integration tests on top of Postgres\n    depends: [ backend-base-images, backend-generate.artifacts ]\n    docker: *use_go_builder_docker_image\n    fingerprint: *go_job_fingerprint\n    environment:\n      TEST_DB_DRIVER: postgres\n      TEST_CONNECTION_STRING: postgres://username:put-password-here@postgres:5432/?sslmode=disable\n    steps:\n      - name: test\n        commands: |\n          . build/scripts/lib/go-env.sh\n          cd backend && go test -v -count=1 -mod=vendor -run Integration ./...\n    services:\n      - name: postgres\n        image: postgres:14\n        environment:\n          POSTGRES_USER: user-name\n          POSTGRES_PASSWORD: use-secrets-dont-put-password-here\n\n  - name: backend-build\n    description: Builds all backend binaries\n    depends:\n      - backend-base-images\n      - backend-generate.artifacts\n      - backend-unit-test-sqlite\n      - backend-unit-test-postgres\n      - backend-integration-test-sqlite\n      - backend-integration-test-postgres\n    docker: *use_go_builder_docker_image\n    fingerprint: *go_job_fingerprint\n    steps:\n      - name: go\n        commands: |\n          ./build/scripts/ci/backend-build.sh\n    artifacts:\n      - build/output/go/bin/*\n\n  - name: frontend-preflight\n    description: Performs preflight checks on all frontend code\n    docker: *use_nodejs_docker_image\n    fingerprint: *frontend_job_fingerprint\n    steps:\n      - name: lint\n        commands: |\n          npm install --location=global prettier\n          ./build/scripts/ci/frontend-preflight-lint.sh\n\n  - name: frontend-unit-test\n    description: Runs all frontend unit tests\n    depends: frontend-preflight\n    docker: *use_nodejs_docker_image\n    fingerprint: *frontend_job_fingerprint\n    steps:\n      - name: install\n        commands: |\n          . build/scripts/lib/node-env.sh\n          cd frontend && yarn install\n      - name: test\n        commands: |\n          . build/scripts/lib/node-env.sh\n          cd frontend && yarn test\n\n  - name: frontend-build\n    description: Builds all frontend code\n    depends: frontend-unit-test\n    docker: *use_nodejs_docker_image\n    fingerprint: *frontend_job_fingerprint\n    steps:\n      - name: install\n        commands: |\n          . build/scripts/lib/node-env.sh\n          cd frontend && yarn install\n      - name: build\n        commands: |\n          . build/scripts/lib/node-env.sh\n          cd frontend && yarn build\n')))}m.isMDXComponent=!0}}]);