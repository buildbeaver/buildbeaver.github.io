"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[664],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>b});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var u=n.createContext({}),s=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,u=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(r),f=i,b=c["".concat(u,".").concat(f)]||c[f]||p[f]||a;return r?n.createElement(b,o(o({ref:t},d),{},{components:r})):n.createElement(b,o({ref:t},d))}));function b(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=f;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},3314:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=r(7462),i=(r(7294),r(3905));const a={sidebar_position:2},o="Define a Build",l={unversionedId:"getting-started-first-build/yaml-build",id:"getting-started-first-build/yaml-build",title:"Define a Build",description:"Create a Git Repo for your build",source:"@site/docs/getting-started-first-build/yaml-build.md",sourceDirName:"getting-started-first-build",slug:"/getting-started-first-build/yaml-build",permalink:"/docs/getting-started-first-build/yaml-build",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/getting-started-first-build/installation"},next:{title:"Run It!",permalink:"/docs/getting-started-first-build/run-build"}},u={},s=[{value:"Create a Git Repo for your build",id:"create-a-git-repo-for-your-build",level:2},{value:"Set up a build YAML file:",id:"set-up-a-build-yaml-file",level:2}],d={toc:s},c="wrapper";function p(e){let{components:t,...r}=e;return(0,i.kt)(c,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"define-a-build"},"Define a Build"),(0,i.kt)("h2",{id:"create-a-git-repo-for-your-build"},"Create a Git Repo for your build"),(0,i.kt)("p",null,"You will need a Git repo containing the software you wish to build. To get started, create a new\nempty git Repo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir build1\ncd build1\ngit init .\n")),(0,i.kt)("p",null,"The repo must have a at least one commit:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"echo >.gitignore 'reports/'\ngit add .gitignore\ngit commit -a -m \"Tell Git to ignore the 'reports' directory\"\n")),(0,i.kt)("h2",{id:"set-up-a-build-yaml-file"},"Set up a build YAML file:"),(0,i.kt)("p",null,"Let's test that BuildBeaver is working by running a simple YAML based build, before moving on to Go."),(0,i.kt)("p",null,"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"buildbeaver.yml")," file in the root directory of your repo (e.g. the build1 directory above) using\nyour favourite editor, and paste in the following content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'jobs:\n  - name: write-file-job\n    docker:\n      image: golang:1.17.13\n    steps:\n      - name: write-file\n        commands: |\n          mkdir -p reports\n          echo >reports/artifact-file.txt "This is the artifact from my first build"\n    artifacts:\n      - name: text-file-artifacts\n        paths: reports/*.txt\n')),(0,i.kt)("p",null,"This YAML defines a build with a single Job and a single step, creating an artifact in the 'reports' directory.\nNote that we don't need to commit this file to Git before running it."))}p.isMDXComponent=!0}}]);