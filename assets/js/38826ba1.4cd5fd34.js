"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[170],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(n),b=r,f=p["".concat(s,".").concat(b)]||p[b]||c[b]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},2710:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:7},i="Build Status",l={unversionedId:"guide-to-dynamic-builds/build-status",id:"guide-to-dynamic-builds/build-status",title:"Build Status",description:"One of the powerful features of the BuildBeaver SDK is the ability for code to read the current status of the build,",source:"@site/docs/guide-to-dynamic-builds/build-status.md",sourceDirName:"guide-to-dynamic-builds",slug:"/guide-to-dynamic-builds/build-status",permalink:"/docs/guide-to-dynamic-builds/build-status",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Callbacks and Waiting",permalink:"/docs/guide-to-dynamic-builds/callbacks-and-waits"},next:{title:"Fingerprints",permalink:"/docs/guide-to-dynamic-builds/fingerprints"}},s={},d=[{value:"Fetching Build and Job Status Info",id:"fetching-build-and-job-status-info",level:2},{value:"Fetching artifacts",id:"fetching-artifacts",level:2},{value:"Fetching logs",id:"fetching-logs",level:2}],u={toc:d},p="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"build-status"},"Build Status"),(0,r.kt)("p",null,"One of the powerful features of the BuildBeaver SDK is the ability for code to read the current status of the build,\nand examine the results of completed or in progress Jobs and Steps. This can be used to make decisions about which\nother Jobs should be added to the build."),(0,r.kt)("p",null,"Every workflow handler function is passed in a Workflow object as a parameter (see ",(0,r.kt)("a",{parentName:"p",href:"workflows#workflow-definitions"},"Workflow Definitions"),")\nand so a workflow object is always available. The ",(0,r.kt)("inlineCode",{parentName:"p"},"GetBuild()")," method on the workflow object can be used to get\na ",(0,r.kt)("em",{parentName:"p"},"Build")," object, which has various methods for fetching status information, artifacts and logs."),(0,r.kt)("h2",{id:"fetching-build-and-job-status-info"},"Fetching Build and Job Status Info"),(0,r.kt)("p",null,"The following methods on the Build object can be used to fetch status information. These methods return\ndata structures defined in the OpenAPI ",(0,r.kt)("inlineCode",{parentName:"p"},"client")," package that contains data definitions and low-level API functions."),(0,r.kt)("p",null,"In the Go SDK some of these methods have a second version with ",(0,r.kt)("inlineCode",{parentName:"p"},"Must")," prepended to the name; these versions are\nthe same method but will terminate the program (and so fail the build) on error."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"GetBuildGraph()"),": Reads and returns the current Build Graph. Returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"client.BuildGraph"),"\nobject containing information about all Jobs and Steps in the entire build, together with\nthe current statubs of every Job and Step. Returns an error if the Build Controller program can't read the info.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"GetJob(jobID)"),": Reads and returns information about a job. Returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"client.Job")," object containing various\ndata including the current status of the Job. The JobID is a Globally Unique ID (GUID) for the job and can be\nobtained from the ",(0,r.kt)("inlineCode",{parentName:"p"},"JobID")," property of a ",(0,r.kt)("inlineCode",{parentName:"p"},"JobStatusChangedEvent")," object.\nReturns an error if the Build Controller program can't read the info.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"GetJobGraph(jobID)"),": Reads and returns information about a job including all steps within the job (forming\nthe 'Job Graph'). Returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"client.JobGraph")," object containing the ",(0,r.kt)("inlineCode",{parentName:"p"},"client.Job")," object as well as a list of\n",(0,r.kt)("inlineCode",{parentName:"p"},"client.Step")," objects for each Step in the Job.\nReturns an error if the Build Controller program can't read the info."))),(0,r.kt)("p",null,"Here's an example of a workflow handler which submits and Job, waits until that job is completed, then reads and\noutputs information about the entire build:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func handler(w *bb.Workflow) error {\n    w.Job(bb.NewJob().\n        Name("build-status-job").\n        Step(bb.NewStep().Name("step-1").Commands("echo \'Running step-1\'").\n        OnCompletion(func(event *bb.JobStatusChangedEvent) {\n            build := w.GetBuild()\n            currentBuildGraph := build.MustGetBuildGraph()  // fetch current status from bb or the server\n            for i, jobGraph := range currentBuildGraph.Jobs() {\n                bb.Log(bb.LogLevelInfo,\n                    fmt.Sprintf("Job %d name \'%s\' has status \'%s\'",\n                        jobGraph.Job.Name, jobGraph.Job.Status))\n            }\n        }))\n    return nil\n}\n')),(0,r.kt)("h2",{id:"fetching-artifacts"},"Fetching artifacts"),(0,r.kt)("p",null,"The following methods on the Build object can be used to find and download artifacts produced by previous Jobs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ListArtifacts(workflow, jobName, groupName)"),": reads information about artifacts from the current build\nthat match the provided workflow, job and artifact group. Pass an empty string for any parameter to match any\nvalue for that parameter."),(0,r.kt)("p",{parentName:"li"},"Returns an ",(0,r.kt)("inlineCode",{parentName:"p"},"ArtifactPage")," object containing the first page of up to 30  ",(0,r.kt)("inlineCode",{parentName:"p"},"client.Artifact")," objects; call Next()\non the returned object to get the next page of results, or Prev() to get the previous page.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ListArtifactsN(workflow, jobName, groupName, pageSize)"),": same as ListArtifacts but allows the page size to\nbe specified instead of defaulting to 30.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"GetArtifactData(artifactID)"),": reads and returns the binary data for an artifact. An artifactID\ncan be obtained from the ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," field of a ",(0,r.kt)("inlineCode",{parentName:"p"},"client.Artifact")," object obtained from ListArtifacts()."))),(0,r.kt)("h2",{id:"fetching-logs"},"Fetching logs"),(0,r.kt)("p",null,"The following methods on the Build object can be used to find and download the logs produced by previous Jobs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"GetLogDescriptor(logDescriptorID)"),": returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"client.LogDescriptor")," object containing information/metadata\nabout the log for a Job or a Step. A logDescriptorID can be obtained from a ",(0,r.kt)("inlineCode",{parentName:"p"},"client.Job")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"client.Step"),"\nobject, returned by GetBuildGraph(), GetJob() and GetJobGraph().")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ReadLogText(logDescriptorID, expand)"),": reads the data for a Job or Step log as plain text (e.g. the log for a\njob or for a step). If expand is true then nested logs will be expanded and returned.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ReadLogData(logDescriptorID, expand)"),": reads the data for a Job or Step log as a series of JSON log entries.\nIf expand is true then nested logs will be expanded and returned."))))}c.isMDXComponent=!0}}]);