"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[170],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=u(n),b=a,f=p["".concat(s,".").concat(b)]||p[b]||c[b]||o;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},2710:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:5},i="Build Status",l={unversionedId:"guide-to-dynamic-builds/build-status",id:"guide-to-dynamic-builds/build-status",title:"Build Status",description:"One of the powerful features of the BuildBeaver SDK is the ability for code to read the current status of the build,",source:"@site/docs/guide-to-dynamic-builds/build-status.md",sourceDirName:"guide-to-dynamic-builds",slug:"/guide-to-dynamic-builds/build-status",permalink:"/docs/guide-to-dynamic-builds/build-status",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Steps",permalink:"/docs/guide-to-dynamic-builds/steps"},next:{title:"Callbacks and Waiting",permalink:"/docs/guide-to-dynamic-builds/callbacks-and-waits"}},s={},u=[{value:"Fetching Build and Job Status Info",id:"fetching-build-and-job-status-info",level:2},{value:"Fetching artifacts",id:"fetching-artifacts",level:2},{value:"Fetching logs",id:"fetching-logs",level:2}],d={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"build-status"},"Build Status"),(0,a.kt)("p",null,"One of the powerful features of the BuildBeaver SDK is the ability for code to read the current status of the build,\nand examine the results of completed or in progress Jobs and Steps. This can be used to make decisions about which\nother Jobs should be added to the build."),(0,a.kt)("p",null,"Every workflow handler function is passed in a Workflow object as a parameter (see ",(0,a.kt)("a",{parentName:"p",href:"workflows#workflow-definitions"},"Workflow Definitions"),")\nand so a workflow object is always available. The ",(0,a.kt)("inlineCode",{parentName:"p"},"GetBuild()")," method on the workflow object can be used to get\na ",(0,a.kt)("em",{parentName:"p"},"Build")," object, which has various methods for fetching status information, artifacts and logs."),(0,a.kt)("h2",{id:"fetching-build-and-job-status-info"},"Fetching Build and Job Status Info"),(0,a.kt)("p",null,"The following methods on the Build object can be used to fetch status information. These methods return\ndata structures defined in the OpenAPI ",(0,a.kt)("inlineCode",{parentName:"p"},"client")," package that contains data definitions and low-level API functions."),(0,a.kt)("p",null,"In the Go SDK some of these methods have a second version with ",(0,a.kt)("inlineCode",{parentName:"p"},"Must")," prepended to the name; these versions are\nthe same method but will terminate the program (and fail the build) on error, rather than returning an error."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"GetBuildGraph()"),": Reads and returns the current Build Graph. Returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"client.BuildGraph"),"\nobject containing information about all Jobs and Steps in the entire build, together with\nthe current statubs of every Job and Step. Returns an error if the Build Controller program can't read the info.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"GetJob(jobID)"),": Reads and returns information about a job. Returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"client.Job")," object containing various\ndata including the current status of the Job. The JobID is a Globally Unique ID (GUID) for the job and is typically\navailable from the ",(0,a.kt)("inlineCode",{parentName:"p"},"JobStatusChangedEvent.JobID property"),".\nReturns an error if the Build Controller program can't read the info.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"GetJobGraph(jobID)"),": Reads and returns information about a job including all steps within the job (forming\nthe 'Job Graph'). Returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"client.JobGraph")," object containing the ",(0,a.kt)("inlineCode",{parentName:"p"},"client.Job")," object as well as a list of\n",(0,a.kt)("inlineCode",{parentName:"p"},"client.Step")," objects for each Step in the Job.\nReturns an error if the Build Controller program can't read the info."))),(0,a.kt)("p",null,"Here's an example of a workflow handler which submits and Job, waits until that job is completed, then reads and\noutputs information about the entire build (some details replaced with ",(0,a.kt)("inlineCode",{parentName:"p"},"....")," for brevity):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func handler(w *bb.Workflow) error {\n    w.Job(bb.NewJob().\n        Name("build-status-job").\n        Step(bb.NewStep().Name("step-1").Commands("echo \'Running step-1\'").\n        OnCompletion(func(event *bb.JobStatusChangedEvent) {\n            build := w.GetBuild()\n            currentBuildGraph := build.MustGetBuildGraph()  // fetch current status from bb or the server\n            for i, jobGraph := range currentBuildGraph.Jobs() {\n                bb.Log(bb.LogLevelInfo,\n                    fmt.Sprintf("Job %d name \'%s\' has status \'%s\'",\n                        jobGraph.Job.Name, jobGraph.Job.Status))\n            }\n        }))\n')),(0,a.kt)("h2",{id:"fetching-artifacts"},"Fetching artifacts"),(0,a.kt)("p",null,"To be documented:"),(0,a.kt)("p",null,"  ",(0,a.kt)("inlineCode",{parentName:"p"},"func (b *Build) ListArtifacts(workflow string, jobName string, groupName string) (*ArtifactPage, error)")),(0,a.kt)("p",null,"  ",(0,a.kt)("inlineCode",{parentName:"p"},"func (b *Build) ListArtifactsN(workflow string, jobName string, groupName string, pageSize int) (*ArtifactPage, error)")),(0,a.kt)("p",null,"  ",(0,a.kt)("inlineCode",{parentName:"p"},"func (b *Build) GetArtifactData(artifactID string) ([]byte, error)")),(0,a.kt)("h2",{id:"fetching-logs"},"Fetching logs"),(0,a.kt)("p",null,"To be documented:"),(0,a.kt)("p",null,"  ",(0,a.kt)("inlineCode",{parentName:"p"},"func (b *Build) GetLogDescriptor(logDescriptorID string) (*client.LogDescriptor, error)")),(0,a.kt)("p",null,"  ",(0,a.kt)("inlineCode",{parentName:"p"},"func (b *Build) ReadLogData(logDescriptorID string, expand bool) (io.ReadCloser, error)")),(0,a.kt)("p",null,"  ",(0,a.kt)("inlineCode",{parentName:"p"},"func (b *Build) ReadLogText(logDescriptorID string, expand bool) (io.ReadCloser, error)")))}c.isMDXComponent=!0}}]);