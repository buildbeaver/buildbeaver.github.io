"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[361],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),f=i,b=d["".concat(u,".").concat(f)]||d[f]||c[f]||o;return n?r.createElement(b,a(a({ref:t},p),{},{components:n})):r.createElement(b,a({ref:t},p))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1263:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:8},a="Fingerprints",s={unversionedId:"guide-to-dynamic-builds/fingerprints",id:"guide-to-dynamic-builds/fingerprints",title:"Fingerprints",description:"Fingerprints allow the running of a Job to be skipped if the Artifacts from a previously successful run",source:"@site/docs/guide-to-dynamic-builds/fingerprints.md",sourceDirName:"guide-to-dynamic-builds",slug:"/guide-to-dynamic-builds/fingerprints",permalink:"/docs/guide-to-dynamic-builds/fingerprints",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Build Status",permalink:"/docs/guide-to-dynamic-builds/build-status"},next:{title:"Services",permalink:"/docs/guide-to-dynamic-builds/services"}},u={},l=[{value:"Defining a Fingerprint",id:"defining-a-fingerprint",level:2},{value:"Forcing all Jobs to run",id:"forcing-all-jobs-to-run",level:2}],p={toc:l},d="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"fingerprints"},"Fingerprints"),(0,i.kt)("p",null,"Fingerprints allow the running of a Job to be skipped if the Artifacts from a previously successful run\nof the Job can be used instead. This can make builds faster, potentially ",(0,i.kt)("em",{parentName:"p"},"much")," faster than having to run every\nJob during every Build."),(0,i.kt)("p",null,"If no fingerprint is defined for a Job then it will never be skipped."),(0,i.kt)("h2",{id:"defining-a-fingerprint"},"Defining a Fingerprint"),(0,i.kt)("p",null,"The workflow handler function defines a Fingerprint for a Job by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"Fingerprint()")," method on\nthe Job object. This method takes a list of commands (strings) that list the Job's inputs. The\ncommands should output either the full input data, or a hash of the data, to stdout."),(0,i.kt)("p",null,"Before the Job's Steps are run, all the fingerprint commands will be run, and their stdout output concatenated\ntogether and hashed. This hash becomes the Job's fingerprint for this particular Build run."),(0,i.kt)("p",null,"If the fingerprint is the same as for a previous run then the Job's steps will not be run, i.e. the Job will be\n",(0,i.kt)("em",{parentName:"p"},"skipped"),". Any artifacts the Job would have produced will be obtained from the previous build run instead."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"It's up to you to ensure it's OK to skip the Job and use artifacts from a previous run if the fingerprint is\nthe same. If the Job output depends on something other than inputs that can be listed by fingerprint commands then\nthe Job can't be skipped, and Fingerprints should not be used."),(0,i.kt)("p",{parentName:"admonition"},"(As a trivial example, a Job's output might depend on a random number generated within one of the Job's Steps.)")),(0,i.kt)("p",null,"Here's an example of a Job that makes use of Fingerprints to skip execution. The Job reverses\nthe order of the lines in file 'input.txt' (expected to be in the root directory of the Repo) and outputs the\nresults to an artifact called 'output.txt':"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'    w.Job(bb.NewJob().\n        Name("fingerprint-testing-job").\n        Docker(bb.NewDocker().Image("docker:20.10").Pull(bb.DockerPullIfNotExists)).\n        Fingerprint("cat input.txt").\n        Step(bb.NewStep().\n            Name("reverse-the-lines").\n            Commands("nl input.txt  | sort -nr | cut -f 2- >output.txt")).\n        Artifact(bb.NewArtifact().\n            Name("output-text-file").\n            Paths("output.txt")))\n')),(0,i.kt)("p",null,"Although this is a trivial example, the 'reverse-the-lines' step is only run if the ",(0,i.kt)("inlineCode",{parentName:"p"},"input.txt")," file has changed\nsince last time the job was run."),(0,i.kt)("h2",{id:"forcing-all-jobs-to-run"},"Forcing all Jobs to run"),(0,i.kt)("p",null,"To force all Jobs to be re-run, regardless of fingerprints, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"-f")," option on the ",(0,i.kt)("inlineCode",{parentName:"p"},"bb")," command\nline tool; this can be a useful test if you think some data was missed out of a fingerprint causing an out-of-dat\nartifact to be used:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"bb run -f\n")))}c.isMDXComponent=!0}}]);